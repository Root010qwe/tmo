import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import GradientBoostingRegressor

st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏", page_icon="üåç")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
@st.cache_data
def load_data():
    df = pd.read_csv("LifeData.csv")
    df = df.dropna()
    df['Status'] = LabelEncoder().fit_transform(df['Status'])  # 0 ‚Äî —Ä–∞–∑–≤–∏–≤–∞—é—â–∞—è—Å—è, 1 ‚Äî —Ä–∞–∑–≤–∏—Ç–∞—è
    X = df.drop(['Country', 'Year', 'Life expectancy '], axis=1)
    y = df['Life expectancy ']
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    return df, X.columns.tolist(), scaler, X, y

df, feature_names, scaler, X, y = load_data()

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
feature_names_ru = {
    'Adult Mortality': '–°–º–µ—Ä—Ç–Ω–æ—Å—Ç—å –≤–∑—Ä–æ—Å–ª—ã—Ö',
    'infant deaths': '–°–º–µ—Ä—Ç–Ω–æ—Å—Ç—å –º–ª–∞–¥–µ–Ω—Ü–µ–≤',
    'Alcohol': '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è',
    'percentage expenditure': '–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (%)',
    'Hepatitis B': '–í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –æ—Ç –≥–µ–ø–∞—Ç–∏—Ç–∞ B (%)',
    'Measles ': '–ó–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç—å –∫–æ—Ä—å—é',
    'BMI': '–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞',
    'under-five deaths': '–°–º–µ—Ä—Ç–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–π –¥–æ 5 –ª–µ—Ç',
    'Polio': '–í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –æ—Ç –ø–æ–ª–∏–æ–º–∏–µ–ª–∏—Ç–∞ (%)',
    'Total expenditure': '–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (%)',
    'Diphtheria ': '–í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –æ—Ç –¥–∏—Ñ—Ç–µ—Ä–∏–∏ (%)',
    'HIV/AIDS': '–°–º–µ—Ä—Ç–Ω–æ—Å—Ç—å –æ—Ç –í–ò–ß/–°–ü–ò–î–∞',
    'GDP': '–í–í–ü',
    'Population': '–ù–∞—Å–µ–ª–µ–Ω–∏–µ',
    'thinness  1-19 years': '–î–æ–ª—è —Ö—É–¥—ã—Ö (1-19 –ª–µ—Ç)',
    'thinness 5-9 years': '–î–æ–ª—è —Ö—É–¥—ã—Ö (5-9 –ª–µ—Ç)',
    'Income composition of resources': '–î–æ—Ö–æ–¥—ã –Ω–∞—Å–µ–ª–µ–Ω–∏—è',
    'Schooling': '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –æ–±—É—á–µ–Ω–∏—è',
    'Status': '–°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω—ã (0 - —Ä–∞–∑–≤–∏–≤–∞—é—â–∞—è—Å—è, 1 - —Ä–∞–∑–≤–∏—Ç–∞—è)'
}

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
st.title("üåç –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏")

st.markdown("""
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π. –î–∞–Ω–Ω—ã–µ –≤–∑—è—Ç—ã –∏–∑ –æ—Ç—á—ë—Ç–æ–≤ –í—Å–µ–º–∏—Ä–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–í–û–ó).

–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
""")

st.header("üî¢ –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
user_input = {}

col1, col2 = st.columns(2)

for i, col in enumerate(feature_names):
    col_ru = feature_names_ru.get(col, col)
    min_val = round(float(df[col].min()), 2)
    max_val = round(float(df[col].max()), 2)
    avg_val = round(float(df[col].mean()), 2)
    step = (max_val - min_val) / 100

    target_col = col1 if i % 2 == 0 else col2

    if df[col].dtype in ['int64', 'float64']:
        user_input[col] = target_col.slider(
            f"{col_ru}", min_value=min_val, max_value=max_val, value=avg_val, step=round(step, 2))
    else:
        user_input[col] = target_col.selectbox(f"{col_ru}", sorted(df[col].unique()))

st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏")
n_estimators = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ (n_estimators)", 50, 300, 100, step=50)

input_df = pd.DataFrame([user_input])
input_scaled = scaler.transform(input_df)

model = GradientBoostingRegressor(n_estimators=n_estimators, random_state=42)
model.fit(X, y)
prediction = model.predict(input_scaled)[0]

st.header("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç")
if st.button("üîç –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
    st.success(f"–û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏: **{prediction:.2f} –≥–æ–¥–∞**")

st.markdown("---")
st.caption("–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: —Å—Ç—É–¥–µ–Ω—Ç –ù–ò–†–° | –î–∞–Ω–Ω—ã–µ: WHO | –ú–æ–¥–µ–ª—å: Gradient Boosting")